CREATE PROCEDURE CALL_TEST_IN_INTEGER_TYPES(@id AS INT, @smallIntVal AS SMALLINT, @bigIntVal AS BIGINT, @tinyIntVal AS TINYINT,
@bitVal AS BIT, @intVal AS INT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_INTEGER_TYPES VALUES(@id, @smallIntVal, @bigIntVal, @tinyIntVal, @bitVal, @intVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_INTEGER_TYPES(@id AS INT, @smallIntVal AS SMALLINT OUTPUT, @bigIntVal AS BIGINT OUTPUT, @tinyIntVal AS TINYINT OUTPUT,
@bitVal AS BIT OUTPUT, @intVal AS INT OUTPUT)
AS
BEGIN
    SELECT @bigIntVal = BIGINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @smallIntVal = SMALLINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @tinyIntVal = TINYINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @bitVal = BIT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @intVal = INTEGER_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_INTEGER_TYPES(@id AS INT, @smallIntVal AS SMALLINT OUTPUT, @bigIntVal AS BIGINT OUTPUT, @tinyIntVal AS TINYINT OUTPUT,
@bitVal AS BIT OUTPUT, @intVal AS INT OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_INTEGER_TYPES VALUES(@id, @smallIntVal, @bigIntVal, @tinyIntVal, @bitVal, @intVal);
    SELECT @bigIntVal = BIGINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @smallIntVal = SMALLINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @tinyIntVal = TINYINT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @bitVal = BIT_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
    SELECT @intVal = INTEGER_VAL FROM SELECT_UPDATE_TEST_INTEGER_TYPES WHERE ID = @id;
END;
/

CREATE PROCEDURE CALL_TEST_IN_FIXED_POINT_TYPES(@id AS INT, @decimalVal AS DECIMAL(4,2), @numericVal AS NUMERIC(4,3), @moneyVal AS MONEY, @smallMoneyVal AS SMALLMONEY)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FIXED_POINT_TYPES VALUES(@id, @decimalVal, @numericVal, @moneyVal, @smallMoneyVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_FIXED_POINT_TYPES(@id AS INT, @decimalVal AS DECIMAL(4,2) OUTPUT, @numericVal AS NUMERIC(4,3) OUTPUT, @moneyVal AS MONEY OUTPUT, @smallMoneyVal AS SMALLMONEY OUTPUT)
AS
BEGIN
    SELECT @decimalVal = DECIMAL_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @numericVal = NUMERIC_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @moneyVal = MONEY_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @smallMoneyVal = SMALLMONEY_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_FIXED_POINT_TYPES(@id AS INT, @decimalVal AS DECIMAL(4,2) OUTPUT, @numericVal AS NUMERIC(4,3) OUTPUT, @moneyVal AS MONEY OUTPUT, @smallMoneyVal AS SMALLMONEY OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FIXED_POINT_TYPES VALUES(@id, @decimalVal, @numericVal, @moneyVal, @smallMoneyVal);
    SELECT @decimalVal = DECIMAL_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @numericVal = NUMERIC_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @moneyVal = MONEY_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
    SELECT @smallMoneyVal = SMALLMONEY_VAL FROM SELECT_UPDATE_TEST_FIXED_POINT_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_IN_STRING_TYPES(@id AS INT, @charVal AS CHAR(4), @varCharVal AS VARCHAR(20), @textVal AS TEXT,
@ncharVal AS NCHAR(2), @nvarCharVal AS NVARCHAR(10), @ntextVal AS NTEXT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_STRING_TYPES VALUES(@id, @charVal, @varCharVal, @textVal, @ncharVal, @nvarCharVal, @ntextVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_STRING_TYPES(@id AS INT, @charVal AS CHAR(4) OUTPUT, @varcharVal AS VARCHAR(20) OUTPUT, @textVal AS TEXT OUTPUT,
@ncharVal AS NCHAR(2) OUTPUT, @nvarcharVal AS NVARCHAR(10) OUTPUT, @ntextVal AS NTEXT OUTPUT)
AS
BEGIN
    SELECT @charVal = CHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @varcharVal = VARCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @textVal = TEXT_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @ncharVal = NCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @nvarcharVal = NVARCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @ntextVal = NTEXT_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_STRING_TYPES(@id AS INT, @charVal AS CHAR(4) OUTPUT, @varcharVal AS VARCHAR(20) OUTPUT, @textVal AS TEXT OUTPUT,
@ncharVal AS NCHAR(2) OUTPUT, @nvarcharVal AS NVARCHAR(10) OUTPUT, @ntextVal AS NTEXT OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_STRING_TYPES VALUES(@id, @charVal, @varcharVal, @textVal, @ncharVal, @nvarcharVal, @ntextVal);
    SELECT @charVal = CHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @varcharVal = VARCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @textVal = TEXT_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @ncharVal = NCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @nvarcharVal = NVARCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
    SELECT @ntextVal = NTEXT_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_IN_COMPLEX_TYPES(@id AS INT, @binaryVal AS BINARY(100), @varBinaryVal AS VARBINARY(100), @imageVal AS IMAGE)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_COMPLEX_TYPES VALUES(@id, @binaryVal, @varBinaryVal, @imageVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_COMPLEX_TYPES(@id AS INT, @binaryVal AS BINARY(100) OUTPUT, @varBinaryVal AS VARBINARY(100) OUTPUT, @imageVal AS IMAGE OUTPUT)
AS
BEGIN
    SELECT @binaryVal = BINARY_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
    SELECT @varBinaryVal = VARBINARY_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
    SELECT @imageVal = IMAGE_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_COMPLEX_TYPES(@id AS INT, @binaryVal AS BINARY(100) OUTPUT, @varBinaryVal AS VARBINARY(100) OUTPUT, @imageVal AS IMAGE OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_COMPLEX_TYPES VALUES(@id, @binaryVal, @varBinaryVal, @imageVal);
    SELECT @binaryVal = BINARY_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
    SELECT @varBinaryVal = VARBINARY_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
    SELECT @imageVal = IMAGE_VAL FROM SELECT_UPDATE_TEST_COMPLEX_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_IN_DATETIME_VALUES(@id AS INT, @dateVal AS DATE, @dateTimeOffsetVal AS DATETIMEOFFSET(7), @dateTimeVal AS DATETIME,
@dateTime2Val AS DATETIME2(7), @smallDateTimeVal AS SMALLDATETIME, @timeVal AS TIME(7))
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_DATETIME_TYPES VALUES(@id, @dateVal, @dateTimeOffsetVal, @dateTimeVal, @dateTime2Val,
    @smallDateTimeVal, @timeVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_DATETIME_TYPES(@id AS INT, @dateVal AS DATE OUTPUT, @dateTimeOffsetVal AS DATETIMEOFFSET(7) OUTPUT, @dateTimeVal AS DATETIME OUTPUT,
@dateTime2Val AS DATETIME2(7) OUTPUT, @smallDateTimeVal AS SMALLDATETIME OUTPUT, @timeVal AS TIME(7) OUTPUT)
AS
BEGIN
    SELECT @dateVal = DATE_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTimeOffsetVal = DATETIMEOFFSET_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTimeVal = DATETIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTime2Val = DATETIME2_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @smallDateTimeVal = SMALLDATETIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @timeVal = TIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_DATETIME_TYPES(@id AS INT, @dateVal AS DATE OUTPUT, @dateTimeOffsetVal AS DATETIMEOFFSET(7) OUTPUT, @dateTimeVal AS DATETIME OUTPUT,
@dateTime2Val AS DATETIME2(7) OUTPUT, @smallDateTimeVal AS SMALLDATETIME OUTPUT, @timeVal AS TIME(7) OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_DATETIME_TYPES VALUES(@id, @dateVal, @dateTimeOffsetVal, @dateTimeVal, @dateTime2Val, @smallDateTimeVal, @timeVal);
    SELECT @dateVal = DATE_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTimeOffsetVal = DATETIMEOFFSET_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTimeVal = DATETIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @dateTime2Val = DATETIME2_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @smallDateTimeVal = SMALLDATETIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
    SELECT @timeVal = TIME_VAL FROM SELECT_UPDATE_TEST_DATETIME_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_IN_FLOAT_TYPES(@id AS INT, @floatVal AS FLOAT(8), @realVal AS REAL)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FLOAT_TYPES VALUES(@id, @floatVal, @realVal);
END;
/
CREATE PROCEDURE CALL_TEST_OUT_FLOAT_TYPES(@id AS INT, @floatVal AS FLOAT(8) OUTPUT, @realVal AS REAL OUTPUT)
AS
BEGIN
    SELECT @floatVal = FLOAT_VAL FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = @id;
    SELECT @realVal = REAL_VAL FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CALL_TEST_INOUT_FLOAT_TYPES(@id AS INT, @floatVal AS FLOAT(8) OUTPUT, @realVal AS REAL OUTPUT)
AS
BEGIN
    INSERT INTO SELECT_UPDATE_TEST_FLOAT_TYPES VALUES(@id, @floatVal, @realVal);
    SELECT @floatVal = FLOAT_VAL FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = @id;
    SELECT @realVal = REAL_VAL FROM SELECT_UPDATE_TEST_FLOAT_TYPES WHERE ID = @id;
END;
/
CREATE PROCEDURE CURSOR_TEST(@id AS INT, @charVal AS CHAR(4) OUTPUT, @varcharVal AS VARCHAR(20) OUTPUT,
@ncharVal AS NCHAR(2) OUTPUT, @nvarcharVal AS NVARCHAR(10) OUTPUT)
AS
BEGIN

DECLARE cursor_string_types CURSOR
FOR SELECT CHAR_VAL, VARCHAR_VAL, NCHAR_VAL, NVARCHAR_VAL FROM SELECT_UPDATE_TEST_STRING_TYPES WHERE ID = @id;

OPEN cursor_string_types;
FETCH NEXT FROM cursor_string_types INTO @charVal, @varcharVal, @ncharVal, @nvarcharVal;

WHILE @@FETCH_STATUS = 0
    BEGIN
        FETCH NEXT FROM cursor_string_types INTO @charVal, @varcharVal, @ncharVal, @nvarcharVal;
    END;

CLOSE cursor_string_types;
DEALLOCATE cursor_string_types;
END;
/
